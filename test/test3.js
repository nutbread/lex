var x = 0;

x >>> /regex/i ;
x >>= /regex/i ;
x >> /regex/i ;
x >= /regex/i ;
x > /regex/i ;
x <<= /regex/i ;
x << /regex/i ;
x <= /regex/i ;
x < /regex/i ;
x === /regex/i ;
x == /regex/i ;
x = /regex/i ;
x !== /regex/i ;
x != /regex/i ;
x ! /regex/i ;
x && /regex/i ;
x &= /regex/i ;
x & /regex/i ;
x || /regex/i ;
x |= /regex/i ;
x | /regex/i ;
x ++ /regex/i ;
x += /regex/i ;
x + /regex/i ;
x -- /regex/i ;
x -= /regex/i ;
x - /regex/i ;
x *= /regex/i ;
x * /regex/i ;
x /= /regex/i ;
x / /regex/i ;
x %= /regex/i ;
x % /regex/i ;
x ^= /regex/i ;
x ^ /regex/i ;
x ~ /regex/i ;
x ? /regex/i ;
x : /regex/i ;
x ; /regex/i ;
x , /regex/i ;
x . /regex/i ;
x ( /regex/i ;
x [ /regex/i ;
x { /regex/i ;
x ) /regex/i ;
x ] /regex/i ;
x } /regex/i ;

x // /regex/i ;
x /**/ /regex/i ;
x "" /regex/i ;
x '' /regex/i ;
/regex/i /regex/i ;

break /regex/i ;
case /regex/i ;
class /regex/i ;
catch /regex/i ;
const /regex/i ;
continue /regex/i ;
debugger /regex/i ;
default /regex/i ;
delete /regex/i ;
do /regex/i ;
else /regex/i ;
export /regex/i ;
extends /regex/i ;
finally /regex/i ;
for /regex/i ;
function /regex/i ;
if /regex/i ;
import /regex/i ;
in /regex/i ;
instanceof /regex/i ;
let /regex/i ;
new /regex/i ;
return /regex/i ;
super /regex/i ;
switch /regex/i ;
this /regex/i ;
throw /regex/i ;
try /regex/i ;
typeof /regex/i ;
var /regex/i ;
void /regex/i ;
while /regex/i ;
with /regex/i ;
yield /regex/i ;
await /regex/i ;
enum /regex/i ;
implements /regex/i ;
interface /regex/i ;
public /regex/i ;
private /regex/i ;
package /regex/i ;
protected /regex/i ;
static /regex/i ;
abstract /regex/i ;
boolean /regex/i ;
byte /regex/i ;
char /regex/i ;
double /regex/i ;
final /regex/i ;
float /regex/i ;
goto /regex/i ;
int /regex/i ;
long /regex/i ;
native /regex/i ;
short /regex/i ;
synchronized /regex/i ;
transient /regex/i ;
volatile /regex/i ;
null /regex/i ;
true /regex/i ;
false /regex/i ;

(1) /regex/i ;
if (1) /regex/i ;
for (;;) /regex/i ;
while (1) /regex/i ;
do {} while (1) /regex/i ;
dont {} while (1) /regex/i ;